<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>RPGchess</title>
  <style>
    #game-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }
  </style>
</head>

<body>
  <div id="game-container"></div>
  <style>
    @Arial-face {
      Arial-family: 'Arial';
      src: url('/images/Retro_Gaming.ttf') format('truetype');
    }
  </style>
  <script src="/socket.io/socket.io.js"></script>
  <script src="../scripts/phaser.min.js"></script>
  <script src="../scripts/GameBundle.js"></script>
  <script type="module">

    let playerPerspective = '<%= playerPerspective %>';   // "WHITE" or "BLACK"
    let gameId = '<%= gameId %>';
    let playerColor = playerPerspective === "WHITE" ? 0 : 1;
    let data = await fetch("/boardState?gameId=" + gameId).then(response => response.json());
    let startingPosition = data.fen
    let currentTurn = data.turn;
    let levelUpXp = data.levelUpXp;
    let game = new GameBundle.Game(1, 2, startingPosition);

    let gameState = game.gameState;
    let board = gameState.board;
    let allAbilities = data.pieceAbilities;
    gameState.currentTurn = currentTurn;

    for (let i = 0; i < board.rows; i++)   // copy piece stats from server, in case of a reconnection
      for (let j = 0; j < board.columns; j++) {
        board.boardSetup[i][j].XP = data.game.gameState.board.boardSetup[i][j].XP;
        board.boardSetup[i][j].level = data.game.gameState.board.boardSetup[i][j].level;
        board.boardSetup[i][j].abilities = data.game.gameState.board.boardSetup[i][j].abilities;
      }

    let socket = io({ query: { gameId: gameId, playerColor: playerColor } });

    const config = {
      type: Phaser.AUTO,
      parent: 'game-container',
      width: window.innerWidth,
      height: window.innerHeight,
      scene: {
        preload: preload,
        create: create,
        update: update
      }
    };
    const gameScene = new Phaser.Game(config);    // BUG: canvas size is set according to visible screen size, not the entire screen size 
    let boardSquareSprites = [];   // 2D array of sprites representing the board squares
    let pieceSprites = [];    // 2D array of sprites representing the pieces
    let validMovesSprites = []; //2D array of sprites representing the valid moves

    function preload() {
      this.load.image('backgroundGradient', '../images/backgroundGradient.avif');
      this.load.image('blackSquare', '../images/blackSquare.png');
      this.load.image('whiteSquare', '../images/whiteSquare.png');
      this.load.image('whitePawn', '../images/whitePawn.png');
      this.load.image('whiteRook', '../images/whiteRook.png');
      this.load.image('whiteKnight', '../images/whiteKnight.png');
      this.load.image('whiteBishop', '../images/whiteBishop.png');
      this.load.image('whiteQueen', '../images/whiteQueen.png');
      this.load.image('whiteKing', '../images/whiteKing.png');
      this.load.image('blackPawn', '../images/blackPawn.png');
      this.load.image('blackRook', '../images/blackRook.png');
      this.load.image('blackKnight', '../images/blackKnight.png');
      this.load.image('blackBishop', '../images/blackBishop.png');
      this.load.image('blackQueen', '../images/blackQueen.png');
      this.load.image('blackKing', '../images/blackKing.png');
      this.load.image('move', '../images/move.png');

    }

    async function create() {
      const background = this.add.image(0, 0, 'backgroundGradient');
      background.setOrigin(0);
      background.setScale(this.sys.game.canvas.width / background.width, this.sys.game.canvas.height / background.height);

      let squareImageSize = this.textures.get('blackSquare').getSourceImage();
      let moveImageSize = this.textures.get('move').getSourceImage();
      let squareSize = 0.8 * window.innerHeight / board.rows;     // vertical size of board always coveres 80% of the screen height
      let squareScale = squareSize / squareImageSize.width;
      let moveScale = squareSize / moveImageSize.width / 2;
      let boardPosition = { x: (window.innerWidth - squareSize * board.columns) / 2, y: (window.innerHeight - squareSize * board.rows) / 2 }; // top left corner of the board


      for (let row = 0; row < board.rows; row++) {
        let currentRow = [];
        for (let col = 0; col < board.columns; col++) {
          let color = (row + col) % 2 === 0 ? 'white' : 'black';
          let squareSprite = this.add.sprite(boardPosition.x + col * squareSize, boardPosition.y + row * squareSize, color + 'Square');
          squareSprite.setOrigin(0, 0);
          squareSprite.setScale(squareScale);
          squareSprite.row = row;
          squareSprite.col = col;
          squareSprite.x = boardPosition.x + col * squareSize; //test what happens when deleted
          squareSprite.y = boardPosition.y + row * squareSize;
          currentRow.push(squareSprite);
        }
        boardSquareSprites.push(currentRow);
      }


      for (let row of board.boardSetup) {
        let currentRow = [];
        for (let piece of row) {
          if (piece.type != ".") {
            let pieceName = ".";
            if (piece.type === "p") pieceName = "Pawn";
            else if (piece.type === "r") pieceName = "Rook";
            else if (piece.type === "n") pieceName = "Knight";
            else if (piece.type === "b") pieceName = "Bishop";
            else if (piece.type === "q") pieceName = "Queen";
            else if (piece.type === "k") pieceName = "King";

            let pieceSprite = null;
            let pieceColor = piece.side === "WHITE" ? "white" : "black";
            if (playerPerspective === "WHITE")
              pieceSprite = this.add.sprite(boardSquareSprites[piece.initialSquare[0]][piece.initialSquare[1]].x, boardSquareSprites[piece.initialSquare[0]][piece.initialSquare[1]].y, pieceColor + pieceName);
            else
              pieceSprite = this.add.sprite(boardSquareSprites[board.rows - piece.initialSquare[0] - 1][board.columns - piece.initialSquare[1] - 1].x, boardSquareSprites[board.rows - piece.initialSquare[0] - 1][board.columns - piece.initialSquare[1] - 1].y, pieceColor + pieceName);

            pieceSprite.setOrigin(0, 0);
            pieceSprite.setScale(squareScale);
            pieceSprite.row = piece.initialSquare[0];
            pieceSprite.col = piece.initialSquare[1];
            pieceSprite.side = piece.side;
            pieceSprite.setInteractive();
            pieceSprite.setDepth(1);

            currentRow.push(pieceSprite);
          }
          else
            currentRow.push(undefined);
        }
        pieceSprites.push(currentRow);
      }


      var graphics = this.add.graphics();

      // Set the fill color, border color, and style
      var fillColor = 0x808080; // Gray color
      var borderColor = 0x000000; // black color
      var radius = 10; // Radius of the rounded corners

      graphics.fillStyle(fillColor);
      graphics.lineStyle(2, borderColor);

      let statsTab = { x: boardPosition.x + board.columns * squareSize + 50, y: boardPosition.y, width: window.innerWidth - (boardPosition.x + board.columns * squareSize + 50) - 10, height: board.rows * squareSize };
      graphics.fillRoundedRect(statsTab.x, statsTab.y, statsTab.width, statsTab.height, radius);
      graphics.strokeRoundedRect(statsTab.x, statsTab.y, statsTab.width, statsTab.height, radius);

      let selectedPieceImage = this.add.sprite(statsTab.x + statsTab.width / 2, statsTab.y + squareSize / 2 + 10, playerPerspective.toLowerCase() + 'King');
      selectedPieceImage.setScale(squareScale);

      let blackLine = new Phaser.Geom.Line(statsTab.x, selectedPieceImage.y + squareSize / 2 + 10, statsTab.x + statsTab.width, selectedPieceImage.y + squareSize / 2 + 10);
      graphics.strokeLineShape(blackLine);

      let textLevel = this.add.text(statsTab.x + 10, selectedPieceImage.y + squareSize / 2 + 20, 'Level: 1', { fontFamily: 'Arial', fontSize: 20, color: '#000000' });
      let textXP = this.add.text(statsTab.x + 10, selectedPieceImage.y + squareSize / 2 + 50, 'XP: 0/' + levelUpXp['KING_LEVELUP_XP'][0], { fontFamily: 'Arial', fontSize: 20, color: '#000000' });
      let textAbilities = this.add.text(statsTab.x + 10, selectedPieceImage.y + squareSize / 2 + 80, 'Abilities: ', { fontFamily: 'Arial', fontSize: 20, color: '#000000' });
      let textAbility = [];
      for (let i = 0; i < data.KING_DEFAULT_ABILITY_CAPACITY; i++)
        textAbility.push(this.add.text(statsTab.x + 10, selectedPieceImage.y + squareSize / 2 + 110 + i * 30, 'NONE', { fontFamily: 'Arial', fontSize: 20, color: '#000000' }));
      let abilityCapacity = this.add.text(statsTab.x + 10, statsTab.y + statsTab.height-70, 'Ability capacity: ' + data.KING_DEFAULT_ABILITY_CAPACITY, { fontFamily: 'Arial', fontSize: 20, color: '#000000' });
      let maxLevel = this.add.text(statsTab.x + 10, statsTab.y + statsTab.height-50, 'Max level: ' + data.KING_MAX_LEVEL, { fontFamily: 'Arial', fontSize: 20, color: '#000000' });
      let captureMultiplier = this.add.text(statsTab.x + 10, statsTab.y + statsTab.height-30, 'Capture multiplier: ' + data.KING_CAPTURE_MULTIPLIER, { fontFamily: 'Arial', fontSize: 20, color: '#000000' });

      // return to menu button

      let returnText = this.add.text(boardPosition.x - 240, boardPosition.y + squareSize / 2 - 10, 'Return to menu', { fontFamily: 'Arial', fontSize: 24, color: '#000000' });
      let returnButton = { x: returnText.x - 10, y: boardPosition.y, width: returnText.width + 20, height: squareSize };
      graphics.fillRoundedRect(returnButton.x, returnButton.y, returnButton.width, returnButton.height, radius);
      graphics.strokeRoundedRect(returnButton.x, returnButton.y, returnButton.width, returnButton.height, radius);
      returnText.setInteractive();

      this.input.on("pointerdown", (pointer, gameObjects) => {
        if (gameObjects[0] instanceof Phaser.GameObjects.Text)  // go home button
          if (gameObjects[0].text === "Return to menu") {
            window.location.href = "/";
            return;
          }


        this.draggedPiece = gameObjects[0];
        if (this.draggedPiece != undefined && this.draggedPiece.side === playerPerspective) {
          this.draggedPiece.setDepth(2);
          this.startingSquare = { row: this.draggedPiece.row, col: this.draggedPiece.col };
        }

        if (this.draggedPiece != undefined) {
          let selectedPiece = board.boardSetup[this.draggedPiece.row][this.draggedPiece.col];

          let pieceName = ".";
          if (selectedPiece.type === "p") pieceName = "Pawn";
          else if (selectedPiece.type === "r") pieceName = "Rook";
          else if (selectedPiece.type === "n") pieceName = "Knight";
          else if (selectedPiece.type === "b") pieceName = "Bishop";
          else if (selectedPiece.type === "q") pieceName = "Queen";
          else if (selectedPiece.type === "k") pieceName = "King";


          selectedPieceImage.setTexture(selectedPiece.side.toLowerCase() + pieceName);
          abilityCapacity.setText("Ability capacity: " + selectedPiece.abilityCapacity);
          maxLevel.setText('Max level: ' + selectedPiece.maxLevel);
          captureMultiplier.setText("Capture multiplier: " + selectedPiece.captureMultiplier);


          let currCapacity = selectedPiece.getAbilityCapacity();
          for (let text of textAbility)
            text.destroy();
          textAbility.length = 0;
          for (let i = 0; i < currCapacity; i++)
            textAbility.push(this.add.text(statsTab.x + 10, selectedPieceImage.y + squareSize / 2 + 110 + i * 30, 'NONE', { fontFamily: 'Arial', fontSize: 20, color: '#000000' }));
          textLevel.setText('Level: ' + (selectedPiece.level + 1));
          textXP.setText('XP: ' + selectedPiece.XP + '/' + levelUpXp[pieceName.toUpperCase() + '_LEVELUP_XP'][selectedPiece.level]);


          let pieceAbilities = selectedPiece.getAbilities();
          for (let idx in pieceAbilities) {
            let currAbility = pieceAbilities[idx];
            textAbility[idx].setText(allAbilities[currAbility[0]] + ": " + currAbility[1] + " uses remaining");
          }
          for (let i = selectedPiece.abilities.length; i < textAbility.length; i++)
            textAbility[i].setText('NONE');
          
          if (this.draggedPiece.side === playerPerspective){
            
            
            let validMoves = board.validMoves([this.draggedPiece.row, this.draggedPiece.col]);
            for (let move of validMoves){
              let moveSprite;
              if (playerPerspective === "WHITE")
                moveSprite = this.add.sprite(boardSquareSprites[move[0]][move[1]].x, boardSquareSprites[move[0]][move[1]].y, 'move');
              else
                moveSprite = this.add.sprite(boardSquareSprites[board.rows - move[0] - 1][board.columns - move[1] - 1].x, boardSquareSprites[board.rows - move[0] - 1][board.columns - move[1] - 1].y, 'move');
              moveSprite.setOrigin(-0.5, -0.5);
              console.log("test in generare moves: ");
              console.log(moveSprite);
              moveSprite.setScale(moveScale);
              console.log(moveSprite);
              moveSprite.row = move[0];
              moveSprite.col = move[1];
              //moveSprite.x = boardPosition.x + col * squareSize; //test what happens when deleted
              //moveSprite.y = boardPosition.y + row * squareSize;
              validMovesSprites.push(moveSprite);
            }
          }

        }
      }, this);

      this.input.on("pointermove", (pointer) => {
        if (this.draggedPiece != undefined && this.draggedPiece.side === playerPerspective) {
          this.draggedPiece.x = pointer.x - squareSize / 2;
          this.draggedPiece.y = pointer.y - squareSize / 2;
        }
      }, this);

      this.input.on("pointerup", (pointer) => {
        for (let moveSprite of validMovesSprites)
              moveSprite.destroy();
            validMovesSprites.length = 0;
        if (this.draggedPiece != undefined && this.draggedPiece.side === playerPerspective) {
          let currentTurn = game.getGameState().getTurn();  // returns 0 for white, 1 for black
          let currentTurnColor = currentTurn === 0 ? "WHITE" : "BLACK";
          if (!(currentTurnColor === playerPerspective)) // if it's not the player's turn
          {
            cancelMove(this);
            return;
          }
          if (pointer.x < boardPosition.x || pointer.x > boardPosition.x + squareSize * board.columns || pointer.y < boardPosition.y || pointer.y > boardPosition.y + squareSize * board.rows) // if the pointer is not on the board
          { // if the mouse is outside the board
            cancelMove(this);
            return;
          }

          let targetSquareSprite = null;
          if (playerPerspective === "WHITE")
            targetSquareSprite = boardSquareSprites[Math.floor((pointer.y - boardPosition.y) / squareSize)][Math.floor((pointer.x - boardPosition.x) / squareSize)];
          else  // get actual square from memory representation, mirrored to the picked square
            targetSquareSprite = boardSquareSprites[board.rows - Math.floor((pointer.y - boardPosition.y) / squareSize) - 1][board.columns - Math.floor((pointer.x - boardPosition.x) / squareSize) - 1];

          let isValidMove = game.getGameState().movePiece([this.draggedPiece.row, this.draggedPiece.col], [targetSquareSprite.row, targetSquareSprite.col]);
          if (!isValidMove)  // illegal move by game rules
          {
            cancelMove(this);
            return;
          }

          // move is valid, update the board
          if (playerPerspective === "WHITE") {
            this.draggedPiece.x = boardSquareSprites[targetSquareSprite.row][targetSquareSprite.col].x;
            this.draggedPiece.y = boardSquareSprites[targetSquareSprite.row][targetSquareSprite.col].y;
          }
          else {
            this.draggedPiece.x = boardSquareSprites[board.rows - targetSquareSprite.row - 1][board.columns - targetSquareSprite.col - 1].x;
            this.draggedPiece.y = boardSquareSprites[board.rows - targetSquareSprite.row - 1][board.columns - targetSquareSprite.col - 1].y;
          }
          this.draggedPiece.row = targetSquareSprite.row;
          this.draggedPiece.col = targetSquareSprite.col;
          let capturedPiece = pieceSprites[targetSquareSprite.row][targetSquareSprite.col];
          if (capturedPiece != undefined)
            if (targetSquareSprite.row != this.startingSquare.row || targetSquareSprite.col != this.startingSquare.col)
              capturedPiece.destroy();

          this.draggedPiece.setDepth(1);

          if (targetSquareSprite.row != this.startingSquare.row || targetSquareSprite.col != this.startingSquare.col) // if the piece was moved to a different square (not just clicked and released
          {
            pieceSprites[targetSquareSprite.row][targetSquareSprite.col] = this.draggedPiece;
            pieceSprites[this.startingSquare.row][this.startingSquare.col] = undefined;
          }


          socket.emit("move", { from: [this.startingSquare.row, this.startingSquare.col], to: [targetSquareSprite.row, targetSquareSprite.col] });

          if (this.draggedPiece != undefined)  // update stats tab
          {
            let selectedPiece = board.boardSetup[this.draggedPiece.row][this.draggedPiece.col];
            let pieceName = ".";
            if (selectedPiece.type === "p") pieceName = "Pawn";
            else if (selectedPiece.type === "r") pieceName = "Rook";
            else if (selectedPiece.type === "n") pieceName = "Knight";
            else if (selectedPiece.type === "b") pieceName = "Bishop";
            else if (selectedPiece.type === "q") pieceName = "Queen";
            else if (selectedPiece.type === "k") pieceName = "King";

            if (selectedPiece.XP >= levelUpXp[pieceName.toUpperCase() + '_LEVELUP_XP'][selectedPiece.level] && !selectedPiece.reachedMaxLevel()) {
              let possibleAbilities = selectedPiece.getPossibleAbilitiesIDs();
              let chooseAbilityText = this.add.text(textAbility[textAbility.length - 1].x, textAbility[textAbility.length - 1].y + 20, "Choose an ability to learn", { fontFamily: 'Arial', fontSize: 24, color: '#000000' });
              let chooseAbility = [];
              for (let idx in possibleAbilities) {
                let abilityId = possibleAbilities[idx];
                let abilityButton = this.add.text(textAbility[textAbility.length - 1].x, textAbility[textAbility.length - 1].y + 50 + idx * 30, allAbilities[abilityId], { fontFamily: 'Arial', fontSize: 24, color: '#000000' });
                abilityButton.setInteractive();
                chooseAbility.push(abilityButton);
                abilityButton.on('pointerdown', () => {
                  socket.emit("levelup", allAbilities[abilityId]);
                  chooseAbilityText.destroy();
                  for (let button of chooseAbility)
                    button.destroy();
                  gameState.levelUp(allAbilities[abilityId]);
                });
              }
            }
            
            textLevel.setText('Level: ' + (selectedPiece.level + 1));
            textXP.setText('XP: ' + selectedPiece.XP + '/' + levelUpXp[pieceName.toUpperCase() + '_LEVELUP_XP'][selectedPiece.level]);

            let pieceAbilities = selectedPiece.abilities;
            for (let idx in pieceAbilities) {
              let currAbility = pieceAbilities[idx];
              textAbility[idx].setText(allAbilities[currAbility[0]] + ": " + currAbility[1] + " uses remaining");
            }
            //console.log("textAbility before:");
            //console.log(textAbility);
            for (let i = selectedPiece.abilities.size; i < textAbility.length; i++)
              textAbility[i].setText('CUCU');

            this.draggedPiece.setTexture(selectedPiece.side.toLowerCase() + pieceName);
            selectedPieceImage.setTexture(selectedPiece.side.toLowerCase() + pieceName);
            abilityCapacity.setText("Ability capacity: " + selectedPiece.abilityCapacity);
            maxLevel.setText('Max level: ' + selectedPiece.maxLevel);
            captureMultiplier.setText("Capture multiplier: " + selectedPiece.captureMultiplier);
            //console.log("textAbility after:");
            //console.log(textAbility);


            
          }

          if (gameState.checkmate()) {
            let winner = gameState.getTurn() === 0 ? "Black" : "White";
            let winnerText = this.add.text(returnButton.x, returnButton.y + returnButton.height + 50, winner + " wins!", { fontFamily: 'Arial', fontSize: 24, color: '#000000' });
            return;
          }

              
          this.draggedPiece = undefined;
          this.startingSquare = undefined;

        }
      }, this);

      socket.on("move", (move) => {
        let movedPiece = pieceSprites[move.from[0]][move.from[1]];
        let capturedPiece = pieceSprites[move.to[0]][move.to[1]];
        if (move.to[0] != move.from[0] || move.to[1] != move.from[1]) {
          pieceSprites[move.to[0]][move.to[1]] = movedPiece;
          pieceSprites[move.from[0]][move.from[1]] = undefined;
        }

        if (capturedPiece != undefined)
          if (move.to[0] != move.from[0] || move.to[1] != move.from[1])
            capturedPiece.destroy();

        if (playerPerspective === "WHITE") {
          movedPiece.x = boardSquareSprites[move.to[0]][move.to[1]].x;
          movedPiece.y = boardSquareSprites[move.to[0]][move.to[1]].y;
        }
        else {
          movedPiece.x = boardSquareSprites[board.rows - move.to[0] - 1][board.columns - move.to[1] - 1].x;
          movedPiece.y = boardSquareSprites[board.rows - move.to[0] - 1][board.columns - move.to[1] - 1].y;
        }
        movedPiece.row = move.to[0];
        movedPiece.col = move.to[1];

        

        
        gameState.movePiece(move.from, move.to);
        let selectedPiece = board.boardSetup[move.to[0]][move.to[1]];
        let pieceName = ".";
        if (selectedPiece.type === "p") pieceName = "Pawn";
          else if (selectedPiece.type === "r") pieceName = "Rook";
          else if (selectedPiece.type === "n") pieceName = "Knight";
          else if (selectedPiece.type === "b") pieceName = "Bishop";
          else if (selectedPiece.type === "q") pieceName = "Queen";
          else if (selectedPiece.type === "k") pieceName = "King";
        movedPiece.setTexture(selectedPiece.side.toLowerCase() + pieceName);
        if (gameState.checkmate()) {
          let winner = gameState.getTurn() === 0 ? "Black" : "White";
          let winnerText = gameScene.scene.scenes[0].add.text(returnButton.x, returnButton.y + returnButton.height + 50, winner + " wins!", { fontFamily: 'Arial', fontSize: 24, color: '#000000' });
          winnerText.setOrigin(0.5, 0.5);
        }
      });

      socket.on("levelup", (ability) => {
        gameState.levelUp(ability);
      });
    }

    function update() {

    }

    function cancelMove(scene) // scene = Phaser scene; move the selected piece back to square it was on before the player started dragging it
    {
      if (scene.draggedPiece != undefined && playerPerspective === "WHITE" && scene.draggedPiece.side === "WHITE") {
        scene.draggedPiece.x = boardSquareSprites[scene.startingSquare.row][scene.startingSquare.col].x;
        scene.draggedPiece.y = boardSquareSprites[scene.startingSquare.row][scene.startingSquare.col].y;
      }
      else {
        scene.draggedPiece.x = boardSquareSprites[board.rows - scene.startingSquare.row - 1][board.columns - scene.startingSquare.col - 1].x;
        scene.draggedPiece.y = boardSquareSprites[board.rows - scene.startingSquare.row - 1][board.columns - scene.startingSquare.col - 1].y;
      }
      scene.draggedPiece.row = scene.startingSquare.row;
      scene.draggedPiece.col = scene.startingSquare.col;
      scene.draggedPiece.setDepth(1);
      scene.draggedPiece = undefined;
      scene.startingSquare = undefined;
    }


  </script>
</body>

</html>